// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShopDAL;

#nullable disable

namespace OnlineShopDAL.Migrations
{
    [DbContext(typeof(OnlineShopContext))]
    [Migration("20231217164839_ItemType")]
    partial class ItemType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineShopDAL.Entities.CartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntity");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.CartItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartItemEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartItemEntity");

                    b.HasIndex("ItemEntity");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<Guid>("RootCategory")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryEntity");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("discriminator").HasValue("BaseItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntity");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.PhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ItemEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PhotoEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReviewEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemEntityId");

                    b.HasIndex("ReviewEntityId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerEntity");

                    b.HasIndex("ItemEntity");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ItemTypes.ItemClothesEntity", b =>
                {
                    b.HasBaseType("OnlineShopDAL.Entities.ItemEntity");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Items");

                    b.HasDiscriminator().HasValue("Clothes");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ItemTypes.ItemDecorationsEntity", b =>
                {
                    b.HasBaseType("OnlineShopDAL.Entities.ItemEntity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Items");

                    b.HasDiscriminator().HasValue("Decorations");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ItemTypes.ItemElectronicsEntity", b =>
                {
                    b.HasBaseType("OnlineShopDAL.Entities.ItemEntity");

                    b.Property<string>("CpuModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemoryCapacity")
                        .HasColumnType("int");

                    b.ToTable("Items");

                    b.HasDiscriminator().HasValue("Electronics");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ItemTypes.ItemSportEntity", b =>
                {
                    b.HasBaseType("OnlineShopDAL.Entities.ItemEntity");

                    b.ToTable("Items");

                    b.HasDiscriminator().HasValue("Sport");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.CartEntity", b =>
                {
                    b.HasOne("OnlineShopDAL.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.CartItemEntity", b =>
                {
                    b.HasOne("OnlineShopDAL.Entities.CartEntity", null)
                        .WithMany("Items")
                        .HasForeignKey("CartItemEntity");

                    b.HasOne("OnlineShopDAL.Entities.OrderEntity", null)
                        .WithMany("Items")
                        .HasForeignKey("CartItemEntity");

                    b.HasOne("OnlineShopDAL.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ItemEntity", b =>
                {
                    b.HasOne("OnlineShopDAL.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.OrderEntity", b =>
                {
                    b.HasOne("OnlineShopDAL.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.PhotoEntity", b =>
                {
                    b.HasOne("OnlineShopDAL.Entities.ItemEntity", null)
                        .WithMany("Photos")
                        .HasForeignKey("ItemEntityId");

                    b.HasOne("OnlineShopDAL.Entities.ReviewEntity", "Review")
                        .WithMany("Photos")
                        .HasForeignKey("ReviewEntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Review");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ReviewEntity", b =>
                {
                    b.HasOne("OnlineShopDAL.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShopDAL.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemEntity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.CartEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ItemEntity", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.OrderEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShopDAL.Entities.ReviewEntity", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
